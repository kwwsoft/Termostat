
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000004ba  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009f  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006c8  00000000  00000000  00000603  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000225  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007ad  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000187  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000553  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea eb       	ldi	r30, 0xBA	; 186
  36:	f4 e0       	ldi	r31, 0x04	; 4
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a6 37       	cpi	r26, 0x76	; 118
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>
  44:	11 d2       	rcall	.+1058   	; 0x468 <main>
  46:	37 c2       	rjmp	.+1134   	; 0x4b6 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <display_write>:
{
        // запись команды/данных
	// объ€вление переменных
	uint8_t buffer; // промежуточный буффер данных
	// запись данных/команды
	if (bit==1)
  4a:	61 30       	cpi	r22, 0x01	; 1
  4c:	51 f4       	brne	.+20     	; 0x62 <display_write+0x18>
	{
		// если используетс€ 8-битный режим
		display_data=(display_data & 0xF0) | (0<<RS) | (0<<RW) | (1<<E); // установка бита E
  4e:	84 2f       	mov	r24, r20
  50:	80 7f       	andi	r24, 0xF0	; 240
  52:	88 60       	ori	r24, 0x08	; 8
		PORTB=display_data; // запись команды
  54:	88 bb       	out	0x18, r24	; 24
		display_data=(display_data & 0xF0) | (0<<RS) | (0<<RW) | (0<<E); // сброс бита E
  56:	80 7f       	andi	r24, 0xF0	; 240
		PORTB=display_data; // запись команды
  58:	88 bb       	out	0x18, r24	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  5a:	81 e2       	ldi	r24, 0x21	; 33
  5c:	8a 95       	dec	r24
  5e:	f1 f7       	brne	.-4      	; 0x5c <display_write+0x12>
  60:	08 95       	ret
		_delay_us(100); // задержка после записи команды/данных
	}
	else if (bit==0)
  62:	66 23       	and	r22, r22
  64:	b1 f4       	brne	.+44     	; 0x92 <display_write+0x48>
	{
		// если используетс€ 4-битный режим
		buffer=display_data; // копирование данных в буффер
		display_data=(display_data & 0xF0) | (reg<<RS) | (0<<RW) | (1<<E); // установка бита E
  66:	98 2f       	mov	r25, r24
  68:	99 0f       	add	r25, r25
  6a:	29 2f       	mov	r18, r25
  6c:	28 60       	ori	r18, 0x08	; 8
  6e:	84 2f       	mov	r24, r20
  70:	80 7f       	andi	r24, 0xF0	; 240
  72:	82 2b       	or	r24, r18
		PORTB=display_data; // запись команды
  74:	88 bb       	out	0x18, r24	; 24
		display_data=(display_data & 0xF0) | (reg<<RS) | (0<<RW) | (0<<E); // сброс бита E
  76:	80 7f       	andi	r24, 0xF0	; 240
  78:	89 2b       	or	r24, r25
		PORTB=display_data; // запись команды
  7a:	88 bb       	out	0x18, r24	; 24
		display_data=buffer; // копирование данных из буффера
		display_data=(display_data<<4); // сдвинуть на 4 бита влево
		display_data=(display_data & 0xF0) | (reg<<RS) | (0<<RW) | (1<<E); // установка бита E
  7c:	84 2f       	mov	r24, r20
  7e:	82 95       	swap	r24
  80:	80 7f       	andi	r24, 0xF0	; 240
  82:	82 2b       	or	r24, r18
		PORTB=display_data; // запись команды
  84:	88 bb       	out	0x18, r24	; 24
		display_data=(display_data & 0xF0) | (reg<<RS) | (0<<RW) | (0<<E); // сброс бита E
  86:	80 7f       	andi	r24, 0xF0	; 240
  88:	89 2b       	or	r24, r25
		PORTB=display_data; // запись команды
  8a:	88 bb       	out	0x18, r24	; 24
  8c:	81 e2       	ldi	r24, 0x21	; 33
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <display_write+0x44>
  92:	08 95       	ret

00000094 <display_init>:
	}
}
// функции
// display_init - функци€ инициализации диспле€
void display_init(void)
{
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	08 e8       	ldi	r16, 0x88	; 136
  9a:	13 e1       	ldi	r17, 0x13	; 19
  9c:	c8 01       	movw	r24, r16
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <display_init+0xa>
	// инициализаци€ диспле€
	_delay_ms(20); // задержка 20мс дл€ установлени€ питани€
	display_write(0, 1, 0x3); // установка разр€дности 8 бит
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	43 e0       	ldi	r20, 0x03	; 3
  a8:	d0 df       	rcall	.-96     	; 0x4a <display_write>
	display_write(0, 1, 0x3); // установка разр€дности 8 бит
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	43 e0       	ldi	r20, 0x03	; 3
  b0:	cc df       	rcall	.-104    	; 0x4a <display_write>
	display_write(0, 1, 0x3); // установка разр€дности 8 бит
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	43 e0       	ldi	r20, 0x03	; 3
  b8:	c8 df       	rcall	.-112    	; 0x4a <display_write>
	display_write(0, 1, 0x2); // установка разр€дности 4 бит
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	42 e0       	ldi	r20, 0x02	; 2
  c0:	c4 df       	rcall	.-120    	; 0x4a <display_write>
	display_write(0, 0, 0x28); // установка параметров
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	48 e2       	ldi	r20, 0x28	; 40
  c8:	c0 df       	rcall	.-128    	; 0x4a <display_write>
	display_write(0, 0, 0x8); // выключение диспле€
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	48 e0       	ldi	r20, 0x08	; 8
  d0:	bc df       	rcall	.-136    	; 0x4a <display_write>
	display_write(0, 0, 0x1); // очистка диспле€
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	b8 df       	rcall	.-144    	; 0x4a <display_write>
  da:	c8 01       	movw	r24, r16
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <display_init+0x48>
	_delay_ms(20); // задержка 20мс на врем€ выполени€ операции
	display_write(0, 0, 0x6); // установка режима ввода данных
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	46 e0       	ldi	r20, 0x06	; 6
  e6:	b1 df       	rcall	.-158    	; 0x4a <display_write>
	display_write(0, 0, 0xC); // включение диспле€
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	4c e0       	ldi	r20, 0x0C	; 12
  ee:	ad df       	rcall	.-166    	; 0x4a <display_write>
}
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <display_write_word>:
}
// display_write_word - функци€ записи строки в дисплей
// data[] - массив символов
// counter - счетчик символов
void display_write_word(uint8_t data[], uint8_t counter)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	06 2f       	mov	r16, r22
 100:	ec 01       	movw	r28, r24
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	05 c0       	rjmp	.+10     	; 0x110 <display_write_word+0x1a>
        // объ€вление переменных
	uint8_t i; // промежуточный счетчик
	for(i=0; i<counter; ++i)
	{
		display_write(1, 0, data[i]); // запись строки символов в дисплей
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	49 91       	ld	r20, Y+
 10c:	9e df       	rcall	.-196    	; 0x4a <display_write>
// counter - счетчик символов
void display_write_word(uint8_t data[], uint8_t counter)
{
        // объ€вление переменных
	uint8_t i; // промежуточный счетчик
	for(i=0; i<counter; ++i)
 10e:	1f 5f       	subi	r17, 0xFF	; 255
 110:	10 17       	cp	r17, r16
 112:	c8 f3       	brcs	.-14     	; 0x106 <display_write_word+0x10>
	{
		display_write(1, 0, data[i]); // запись строки символов в дисплей
	}
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <count_termo>:
count_termo(counter);
	}
}
//****************************************************************************************
void count_termo(uint16_t counter)
{
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
uint16_t buffer;
    uint8_t doli=0; // доли
	uint8_t edin=0; // единицы
	uint8_t des=0; // дес€тки
	uint8_t sot=0; // сотни
	counter=counter>>3;
 124:	23 e0       	ldi	r18, 0x03	; 3
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	2a 95       	dec	r18
 12c:	e1 f7       	brne	.-8      	; 0x126 <count_termo+0x8>
	buffer=counter;
	if ((counter & 256)==256)
 12e:	90 fd       	sbrc	r25, 0
 130:	05 c1       	rjmp	.+522    	; 0x33c <count_termo+0x21e>
 132:	00 e0       	ldi	r16, 0x00	; 0
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	ff 24       	eor	r15, r15
 13a:	11 c0       	rjmp	.+34     	; 0x15e <count_termo+0x40>
	else if ((counter & 256)==0)
	{
	counter=buffer;
	while(counter>0)
	{
	    ++doli;
 13c:	f3 94       	inc	r15
		if (doli>1)
 13e:	31 e0       	ldi	r19, 0x01	; 1
 140:	3f 15       	cp	r19, r15
 142:	60 f4       	brcc	.+24     	; 0x15c <count_termo+0x3e>
		{
		    doli=0;
			++edin;
 144:	0f 5f       	subi	r16, 0xFF	; 255
			if (edin>9)
 146:	0a 30       	cpi	r16, 0x0A	; 10
 148:	40 f0       	brcs	.+16     	; 0x15a <count_termo+0x3c>
			{
			    edin=0;
				++des;
 14a:	1f 5f       	subi	r17, 0xFF	; 255
				if (des>9)
 14c:	1a 30       	cpi	r17, 0x0A	; 10
 14e:	10 f4       	brcc	.+4      	; 0x154 <count_termo+0x36>
 150:	00 e0       	ldi	r16, 0x00	; 0
 152:	03 c0       	rjmp	.+6      	; 0x15a <count_termo+0x3c>
				{
				    des=0;
				    ++sot;
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	00 e0       	ldi	r16, 0x00	; 0
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	ff 24       	eor	r15, r15
				}
			}
		}
		--counter;
 15c:	01 97       	sbiw	r24, 0x01	; 1
	}

	else if ((counter & 256)==0)
	{
	counter=buffer;
	while(counter>0)
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	69 f7       	brne	.-38     	; 0x13c <count_termo+0x1e>
				}
			}
		}
		--counter;
	}
	if (sot==1)
 162:	21 30       	cpi	r18, 0x01	; 1
 164:	c9 f5       	brne	.+114    	; 0x1d8 <count_termo+0xba>
	{
	display_write_word("1", 1);
 166:	80 e6       	ldi	r24, 0x60	; 96
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	c4 df       	rcall	.-120    	; 0xf6 <display_write_word>
	if (des==0)
 16e:	11 23       	and	r17, r17
 170:	19 f4       	brne	.+6      	; 0x178 <count_termo+0x5a>
	display_write_word("0", 1);
 172:	82 e6       	ldi	r24, 0x62	; 98
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2d c0       	rjmp	.+90     	; 0x1d2 <count_termo+0xb4>
	else if (des==1)
 178:	11 30       	cpi	r17, 0x01	; 1
 17a:	19 f4       	brne	.+6      	; 0x182 <count_termo+0x64>
	display_write_word("1", 1);
 17c:	80 e6       	ldi	r24, 0x60	; 96
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	28 c0       	rjmp	.+80     	; 0x1d2 <count_termo+0xb4>
	else if (des==2)
 182:	12 30       	cpi	r17, 0x02	; 2
 184:	19 f4       	brne	.+6      	; 0x18c <count_termo+0x6e>
	display_write_word("2", 1);
 186:	84 e6       	ldi	r24, 0x64	; 100
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	23 c0       	rjmp	.+70     	; 0x1d2 <count_termo+0xb4>
	else if (des==3)
 18c:	13 30       	cpi	r17, 0x03	; 3
 18e:	19 f4       	brne	.+6      	; 0x196 <count_termo+0x78>
	display_write_word("3", 1);
 190:	86 e6       	ldi	r24, 0x66	; 102
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	1e c0       	rjmp	.+60     	; 0x1d2 <count_termo+0xb4>
	else if (des==4)
 196:	14 30       	cpi	r17, 0x04	; 4
 198:	19 f4       	brne	.+6      	; 0x1a0 <count_termo+0x82>
	display_write_word("4", 1);
 19a:	88 e6       	ldi	r24, 0x68	; 104
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	19 c0       	rjmp	.+50     	; 0x1d2 <count_termo+0xb4>
	else if (des==5)
 1a0:	15 30       	cpi	r17, 0x05	; 5
 1a2:	19 f4       	brne	.+6      	; 0x1aa <count_termo+0x8c>
	display_write_word("5", 1);
 1a4:	8a e6       	ldi	r24, 0x6A	; 106
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <count_termo+0xb4>
	else if (des==6)
 1aa:	16 30       	cpi	r17, 0x06	; 6
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <count_termo+0x96>
	display_write_word("6", 1);
 1ae:	8c e6       	ldi	r24, 0x6C	; 108
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <count_termo+0xb4>
	else if (des==7)
 1b4:	17 30       	cpi	r17, 0x07	; 7
 1b6:	19 f4       	brne	.+6      	; 0x1be <count_termo+0xa0>
	display_write_word("7", 1);
 1b8:	8e e6       	ldi	r24, 0x6E	; 110
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <count_termo+0xb4>
	else if (des==8)
 1be:	18 30       	cpi	r17, 0x08	; 8
 1c0:	19 f4       	brne	.+6      	; 0x1c8 <count_termo+0xaa>
	display_write_word("8", 1);
 1c2:	80 e7       	ldi	r24, 0x70	; 112
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <count_termo+0xb4>
	else if (des==9)
 1c8:	19 30       	cpi	r17, 0x09	; 9
 1ca:	09 f0       	breq	.+2      	; 0x1ce <count_termo+0xb0>
 1cc:	74 c0       	rjmp	.+232    	; 0x2b6 <count_termo+0x198>
	display_write_word("9", 1);
 1ce:	82 e7       	ldi	r24, 0x72	; 114
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	90 df       	rcall	.-224    	; 0xf6 <display_write_word>
 1d6:	6f c0       	rjmp	.+222    	; 0x2b6 <count_termo+0x198>
	display_write_word("0", 1);
	else if (doli==1)
	display_write_word("5", 1);
	return;
	}
	else if (des>0)
 1d8:	11 23       	and	r17, r17
 1da:	09 f4       	brne	.+2      	; 0x1de <count_termo+0xc0>
 1dc:	6c c0       	rjmp	.+216    	; 0x2b6 <count_termo+0x198>
	{
	if (des==1)
 1de:	11 30       	cpi	r17, 0x01	; 1
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <count_termo+0xca>
	display_write_word("1", 1);
 1e2:	80 e6       	ldi	r24, 0x60	; 96
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	27 c0       	rjmp	.+78     	; 0x236 <count_termo+0x118>
	else if (des==2)
 1e8:	12 30       	cpi	r17, 0x02	; 2
 1ea:	19 f4       	brne	.+6      	; 0x1f2 <count_termo+0xd4>
	display_write_word("2", 1);
 1ec:	84 e6       	ldi	r24, 0x64	; 100
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	22 c0       	rjmp	.+68     	; 0x236 <count_termo+0x118>
	else if (des==3)
 1f2:	13 30       	cpi	r17, 0x03	; 3
 1f4:	19 f4       	brne	.+6      	; 0x1fc <count_termo+0xde>
	display_write_word("3", 1);
 1f6:	86 e6       	ldi	r24, 0x66	; 102
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <count_termo+0x118>
	else if (des==4)
 1fc:	14 30       	cpi	r17, 0x04	; 4
 1fe:	19 f4       	brne	.+6      	; 0x206 <count_termo+0xe8>
	display_write_word("4", 1);
 200:	88 e6       	ldi	r24, 0x68	; 104
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	18 c0       	rjmp	.+48     	; 0x236 <count_termo+0x118>
	else if (des==5)
 206:	15 30       	cpi	r17, 0x05	; 5
 208:	19 f4       	brne	.+6      	; 0x210 <count_termo+0xf2>
	display_write_word("5", 1);
 20a:	8a e6       	ldi	r24, 0x6A	; 106
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	13 c0       	rjmp	.+38     	; 0x236 <count_termo+0x118>
	else if (des==6)
 210:	16 30       	cpi	r17, 0x06	; 6
 212:	19 f4       	brne	.+6      	; 0x21a <count_termo+0xfc>
	display_write_word("6", 1);
 214:	8c e6       	ldi	r24, 0x6C	; 108
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e c0       	rjmp	.+28     	; 0x236 <count_termo+0x118>
	else if (des==7)
 21a:	17 30       	cpi	r17, 0x07	; 7
 21c:	19 f4       	brne	.+6      	; 0x224 <count_termo+0x106>
	display_write_word("7", 1);
 21e:	8e e6       	ldi	r24, 0x6E	; 110
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	09 c0       	rjmp	.+18     	; 0x236 <count_termo+0x118>
	else if (des==8)
 224:	18 30       	cpi	r17, 0x08	; 8
 226:	19 f4       	brne	.+6      	; 0x22e <count_termo+0x110>
	display_write_word("8", 1);
 228:	80 e7       	ldi	r24, 0x70	; 112
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	04 c0       	rjmp	.+8      	; 0x236 <count_termo+0x118>
	else if (des==9)
 22e:	19 30       	cpi	r17, 0x09	; 9
 230:	21 f4       	brne	.+8      	; 0x23a <count_termo+0x11c>
	display_write_word("9", 1);
 232:	82 e7       	ldi	r24, 0x72	; 114
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	5e df       	rcall	.-324    	; 0xf6 <display_write_word>
	
	if (edin==0)
 23a:	00 23       	and	r16, r16
 23c:	19 f4       	brne	.+6      	; 0x244 <count_termo+0x126>
	display_write_word("0", 1);
 23e:	82 e6       	ldi	r24, 0x62	; 98
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	2c c0       	rjmp	.+88     	; 0x29c <count_termo+0x17e>
	else if (edin==1)
 244:	01 30       	cpi	r16, 0x01	; 1
 246:	19 f4       	brne	.+6      	; 0x24e <count_termo+0x130>
	display_write_word("1", 1);
 248:	80 e6       	ldi	r24, 0x60	; 96
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	27 c0       	rjmp	.+78     	; 0x29c <count_termo+0x17e>
		else if (edin==2)
 24e:	02 30       	cpi	r16, 0x02	; 2
 250:	19 f4       	brne	.+6      	; 0x258 <count_termo+0x13a>
	display_write_word("2", 1);
 252:	84 e6       	ldi	r24, 0x64	; 100
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	22 c0       	rjmp	.+68     	; 0x29c <count_termo+0x17e>
		else if (edin==3)
 258:	03 30       	cpi	r16, 0x03	; 3
 25a:	19 f4       	brne	.+6      	; 0x262 <count_termo+0x144>
	display_write_word("3", 1);
 25c:	86 e6       	ldi	r24, 0x66	; 102
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	1d c0       	rjmp	.+58     	; 0x29c <count_termo+0x17e>
		else if (edin==4)
 262:	04 30       	cpi	r16, 0x04	; 4
 264:	19 f4       	brne	.+6      	; 0x26c <count_termo+0x14e>
	display_write_word("4", 1);
 266:	88 e6       	ldi	r24, 0x68	; 104
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	18 c0       	rjmp	.+48     	; 0x29c <count_termo+0x17e>
		else if (edin==5)
 26c:	05 30       	cpi	r16, 0x05	; 5
 26e:	19 f4       	brne	.+6      	; 0x276 <count_termo+0x158>
	display_write_word("5", 1);
 270:	8a e6       	ldi	r24, 0x6A	; 106
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	13 c0       	rjmp	.+38     	; 0x29c <count_termo+0x17e>
		else if (edin==6)
 276:	06 30       	cpi	r16, 0x06	; 6
 278:	19 f4       	brne	.+6      	; 0x280 <count_termo+0x162>
	display_write_word("6", 1);
 27a:	8c e6       	ldi	r24, 0x6C	; 108
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e c0       	rjmp	.+28     	; 0x29c <count_termo+0x17e>
		else if (edin==7)
 280:	07 30       	cpi	r16, 0x07	; 7
 282:	19 f4       	brne	.+6      	; 0x28a <count_termo+0x16c>
	display_write_word("7", 1);
 284:	8e e6       	ldi	r24, 0x6E	; 110
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	09 c0       	rjmp	.+18     	; 0x29c <count_termo+0x17e>
		else if (edin==8)
 28a:	08 30       	cpi	r16, 0x08	; 8
 28c:	19 f4       	brne	.+6      	; 0x294 <count_termo+0x176>
	display_write_word("8", 1);
 28e:	80 e7       	ldi	r24, 0x70	; 112
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	04 c0       	rjmp	.+8      	; 0x29c <count_termo+0x17e>
		else if (edin==9)
 294:	09 30       	cpi	r16, 0x09	; 9
 296:	21 f4       	brne	.+8      	; 0x2a0 <count_termo+0x182>
	display_write_word("9", 1);
 298:	82 e7       	ldi	r24, 0x72	; 114
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	2b df       	rcall	.-426    	; 0xf6 <display_write_word>
	
	display_write_word(",", 1);
 2a0:	84 e7       	ldi	r24, 0x74	; 116
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	27 df       	rcall	.-434    	; 0xf6 <display_write_word>
	
	if (doli==0)
 2a8:	ff 20       	and	r15, r15
 2aa:	f1 f1       	breq	.+124    	; 0x328 <count_termo+0x20a>
	display_write_word("0", 1);
	else if (doli==1)
 2ac:	31 e0       	ldi	r19, 0x01	; 1
 2ae:	f3 16       	cp	r15, r19
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <count_termo+0x196>
 2b2:	44 c0       	rjmp	.+136    	; 0x33c <count_termo+0x21e>
 2b4:	3f c0       	rjmp	.+126    	; 0x334 <count_termo+0x216>
	display_write_word("5", 1);
	return;
	}
	else if (edin==0)
 2b6:	00 23       	and	r16, r16
 2b8:	19 f4       	brne	.+6      	; 0x2c0 <count_termo+0x1a2>
	display_write_word("0", 1);
 2ba:	82 e6       	ldi	r24, 0x62	; 98
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	2c c0       	rjmp	.+88     	; 0x318 <count_termo+0x1fa>
	else if (edin==1)
 2c0:	01 30       	cpi	r16, 0x01	; 1
 2c2:	19 f4       	brne	.+6      	; 0x2ca <count_termo+0x1ac>
	display_write_word("1", 1);
 2c4:	80 e6       	ldi	r24, 0x60	; 96
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	27 c0       	rjmp	.+78     	; 0x318 <count_termo+0x1fa>
		else if (edin==2)
 2ca:	02 30       	cpi	r16, 0x02	; 2
 2cc:	19 f4       	brne	.+6      	; 0x2d4 <count_termo+0x1b6>
	display_write_word("2", 1);
 2ce:	84 e6       	ldi	r24, 0x64	; 100
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	22 c0       	rjmp	.+68     	; 0x318 <count_termo+0x1fa>
		else if (edin==3)
 2d4:	03 30       	cpi	r16, 0x03	; 3
 2d6:	19 f4       	brne	.+6      	; 0x2de <count_termo+0x1c0>
	display_write_word("3", 1);
 2d8:	86 e6       	ldi	r24, 0x66	; 102
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	1d c0       	rjmp	.+58     	; 0x318 <count_termo+0x1fa>
		else if (edin==4)
 2de:	04 30       	cpi	r16, 0x04	; 4
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <count_termo+0x1ca>
	display_write_word("4", 1);
 2e2:	88 e6       	ldi	r24, 0x68	; 104
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	18 c0       	rjmp	.+48     	; 0x318 <count_termo+0x1fa>
		else if (edin==5)
 2e8:	05 30       	cpi	r16, 0x05	; 5
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <count_termo+0x1d4>
	display_write_word("5", 1);
 2ec:	8a e6       	ldi	r24, 0x6A	; 106
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	13 c0       	rjmp	.+38     	; 0x318 <count_termo+0x1fa>
		else if (edin==6)
 2f2:	06 30       	cpi	r16, 0x06	; 6
 2f4:	19 f4       	brne	.+6      	; 0x2fc <count_termo+0x1de>
	display_write_word("6", 1);
 2f6:	8c e6       	ldi	r24, 0x6C	; 108
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e c0       	rjmp	.+28     	; 0x318 <count_termo+0x1fa>
		else if (edin==7)
 2fc:	07 30       	cpi	r16, 0x07	; 7
 2fe:	19 f4       	brne	.+6      	; 0x306 <count_termo+0x1e8>
	display_write_word("7", 1);
 300:	8e e6       	ldi	r24, 0x6E	; 110
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	09 c0       	rjmp	.+18     	; 0x318 <count_termo+0x1fa>
		else if (edin==8)
 306:	08 30       	cpi	r16, 0x08	; 8
 308:	19 f4       	brne	.+6      	; 0x310 <count_termo+0x1f2>
	display_write_word("8", 1);
 30a:	80 e7       	ldi	r24, 0x70	; 112
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	04 c0       	rjmp	.+8      	; 0x318 <count_termo+0x1fa>
		else if (edin==9)
 310:	09 30       	cpi	r16, 0x09	; 9
 312:	21 f4       	brne	.+8      	; 0x31c <count_termo+0x1fe>
	display_write_word("9", 1);
 314:	82 e7       	ldi	r24, 0x72	; 114
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	ed de       	rcall	.-550    	; 0xf6 <display_write_word>
	
	display_write_word(",", 1);
 31c:	84 e7       	ldi	r24, 0x74	; 116
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	e9 de       	rcall	.-558    	; 0xf6 <display_write_word>
	
	if (doli==0)
 324:	ff 20       	and	r15, r15
 326:	19 f4       	brne	.+6      	; 0x32e <count_termo+0x210>
	display_write_word("0", 1);
 328:	82 e6       	ldi	r24, 0x62	; 98
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	05 c0       	rjmp	.+10     	; 0x338 <count_termo+0x21a>
	else if (doli==1)
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	f8 16       	cp	r15, r24
 332:	21 f4       	brne	.+8      	; 0x33c <count_termo+0x21e>
	display_write_word("5", 1);
 334:	8a e6       	ldi	r24, 0x6A	; 106
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	dd de       	rcall	.-582    	; 0xf6 <display_write_word>
	return;
	}
}
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	08 95       	ret

00000344 <sensor_write_1_0>:
}
// sensor_write_1_0 - функци€ записи 1/0
// bit - 0/1 => запись 0/1
void sensor_write_1_0(uint8_t bit)
{
	if (bit==0)
 344:	88 23       	and	r24, r24
 346:	31 f4       	brne	.+12     	; 0x354 <sensor_write_1_0+0x10>
	{
		DDRB=DDRB | (1<<DQ); // запись 0
 348:	b8 9a       	sbi	0x17, 0	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 34a:	81 e2       	ldi	r24, 0x21	; 33
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <sensor_write_1_0+0x8>
		_delay_us(100); // задержка 100мкс
		DDRB=DDRB & 0xFE; // запись 1
 350:	b8 98       	cbi	0x17, 0	; 23
 352:	08 95       	ret
	}
	else if (bit==1)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	29 f4       	brne	.+10     	; 0x362 <sensor_write_1_0+0x1e>
	{
		DDRB=DDRB | (1<<DQ); // запись 0
 358:	b8 9a       	sbi	0x17, 0	; 23
		DDRB=DDRB & 0xFE; // запись 1
 35a:	b8 98       	cbi	0x17, 0	; 23
 35c:	81 e2       	ldi	r24, 0x21	; 33
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <sensor_write_1_0+0x1a>
 362:	08 95       	ret

00000364 <sensor_read_1_0>:
// sensor_read_1_0 - функци€ чтени€ 1/0
uint8_t sensor_read_1_0(void)
{
    // объ€вление переменных
    uint8_t bit; // данные DQ
	DDRB=DDRB | (1<<DQ); // запись 0
 364:	b8 9a       	sbi	0x17, 0	; 23
	DDRB=DDRB & 0xFE; // запись 1
 366:	b8 98       	cbi	0x17, 0	; 23
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <sensor_read_1_0+0x6>
	_delay_us(8); // задержка
    bit=PINB & 0x1; // чтение состо€ни€ линии DQ
 36e:	86 b3       	in	r24, 0x16	; 22
 370:	91 e2       	ldi	r25, 0x21	; 33
 372:	9a 95       	dec	r25
 374:	f1 f7       	brne	.-4      	; 0x372 <sensor_read_1_0+0xe>
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	80 fd       	sbrc	r24, 0
 37a:	91 e0       	ldi	r25, 0x01	; 1
	}
	else if (bit==0x0)
	{
		return 0; // возвращение 0
	}
}
 37c:	89 2f       	mov	r24, r25
 37e:	08 95       	ret

00000380 <sensor_write>:
}
// sensor_write - функци€ записи команд/данных датчик температуры
// function_cmd - функциональна€ команда
// scratchpad - данные
uint16_t sensor_write(uint8_t function_cmd, uint8_t scratchpad)
{
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	f8 2e       	mov	r15, r24
 38e:	e6 2e       	mov	r14, r22
	uint8_t buffer; // буффер данных
	uint16_t response; // двухбайтовые температурные данные
	rom_cmd=0xCC; // всегда Skip ROM
    response=0x0; // обнуление переменной данных температуры
	// импульс сброса и импульс присутстви€
	DDRB=DDRB | (1<<DQ); // запись 0
 390:	b8 9a       	sbi	0x17, 0	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 392:	80 ef       	ldi	r24, 0xF0	; 240
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	fc 01       	movw	r30, r24
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <sensor_write+0x18>
	_delay_us(960); // задержка 480мкс
	DDRB=DDRB & 0xFE; // запись 1
 39c:	b8 98       	cbi	0x17, 0	; 23
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <sensor_write+0x1e>
 3a2:	00 e0       	ldi	r16, 0x00	; 0
 3a4:	1c ec       	ldi	r17, 0xCC	; 204
	// запись команды ROM пам€ти
	for(i=0; i<8; ++i)
	{
		buffer=rom_cmd; // копирование данных
		buffer=buffer & 0x1; // выделение 1-го бита
		if(buffer==0x1)
 3a6:	10 ff       	sbrs	r17, 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <sensor_write+0x2e>
		{
			sensor_write_1_0(1); // запись 1
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <sensor_write+0x30>
		}
		else if (buffer==0x0)
		{
			sensor_write_1_0(0); // запись 0
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	c9 df       	rcall	.-110    	; 0x344 <sensor_write_1_0>
	DDRB=DDRB | (1<<DQ); // запись 0
	_delay_us(960); // задержка 480мкс
	DDRB=DDRB & 0xFE; // запись 1
	_delay_us(960); // задержка 480мкс
	// запись команды ROM пам€ти
	for(i=0; i<8; ++i)
 3b2:	0f 5f       	subi	r16, 0xFF	; 255
 3b4:	08 30       	cpi	r16, 0x08	; 8
 3b6:	11 f0       	breq	.+4      	; 0x3bc <sensor_write+0x3c>
		}
		else if (buffer==0x0)
		{
			sensor_write_1_0(0); // запись 0
		}
		rom_cmd=(rom_cmd>>1); // сдвинуть содержимое слова команды на разр€д вправо
 3b8:	16 95       	lsr	r17
 3ba:	f5 cf       	rjmp	.-22     	; 0x3a6 <sensor_write+0x26>
 3bc:	88 e8       	ldi	r24, 0x88	; 136
 3be:	93 e1       	ldi	r25, 0x13	; 19
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <sensor_write+0x40>
 3c4:	0f 2d       	mov	r16, r15
 3c6:	10 e0       	ldi	r17, 0x00	; 0
	rom_cmd=function_cmd; // копировать назначение команды
	for(i=0; i<8; ++i)
	{
		buffer=function_cmd; // копирование данных
		buffer=buffer & 0x1; // выделение 1-го бита
		if(buffer==0x1)
 3c8:	00 ff       	sbrs	r16, 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <sensor_write+0x50>
		{
			sensor_write_1_0(1); // запись 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <sensor_write+0x52>
		}
		else if (buffer==0x0)
		{
			sensor_write_1_0(0); // запись 0
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	b8 df       	rcall	.-144    	; 0x344 <sensor_write_1_0>
		}
		rom_cmd=(rom_cmd>>1); // сдвинуть содержимое слова команды на разр€д вправо
	}
	_delay_ms(20); // задержка между командами
	rom_cmd=function_cmd; // копировать назначение команды
	for(i=0; i<8; ++i)
 3d4:	1f 5f       	subi	r17, 0xFF	; 255
 3d6:	18 30       	cpi	r17, 0x08	; 8
 3d8:	11 f0       	breq	.+4      	; 0x3de <sensor_write+0x5e>
		}
		else if (buffer==0x0)
		{
			sensor_write_1_0(0); // запись 0
		}
		function_cmd=(function_cmd>>1); // сдвинуть содержимое слова команды на разр€д вправо
 3da:	06 95       	lsr	r16
 3dc:	f5 cf       	rjmp	.-22     	; 0x3c8 <sensor_write+0x48>
 3de:	88 e8       	ldi	r24, 0x88	; 136
 3e0:	93 e1       	ldi	r25, 0x13	; 19
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <sensor_write+0x62>
	}
	_delay_ms(20); // задержка между командами
	function_cmd=rom_cmd; // копировать назначение функциональной команды
	if (function_cmd==0x4E)
 3e6:	8e e4       	ldi	r24, 0x4E	; 78
 3e8:	f8 16       	cp	r15, r24
 3ea:	b9 f4       	brne	.+46     	; 0x41a <sensor_write+0x9a>
 3ec:	10 e0       	ldi	r17, 0x00	; 0
	{
		// если используетс€ команда Write_Scratchpad
		for(i=0; i<16; ++i)
		{
			sensor_write_1_0(0); // запись 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	a9 df       	rcall	.-174    	; 0x344 <sensor_write_1_0>
	_delay_ms(20); // задержка между командами
	function_cmd=rom_cmd; // копировать назначение функциональной команды
	if (function_cmd==0x4E)
	{
		// если используетс€ команда Write_Scratchpad
		for(i=0; i<16; ++i)
 3f2:	1f 5f       	subi	r17, 0xFF	; 255
 3f4:	10 31       	cpi	r17, 0x10	; 16
 3f6:	d9 f7       	brne	.-10     	; 0x3ee <sensor_write+0x6e>
 3f8:	10 e0       	ldi	r17, 0x00	; 0
		}
		for(i=0; i<8; ++i)
			{
				buffer=scratchpad; // копирование данных
				buffer=buffer & 0x1; // выделение 1-го бита
				if(buffer==0x1)
 3fa:	e0 fe       	sbrs	r14, 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <sensor_write+0x82>
				{
					sensor_write_1_0(1); // запись 1
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	01 c0       	rjmp	.+2      	; 0x404 <sensor_write+0x84>
				}
				else if (buffer==0x0)
				{
					sensor_write_1_0(0); // запись 0
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	9f df       	rcall	.-194    	; 0x344 <sensor_write_1_0>
		// если используетс€ команда Write_Scratchpad
		for(i=0; i<16; ++i)
		{
			sensor_write_1_0(0); // запись 0
		}
		for(i=0; i<8; ++i)
 406:	1f 5f       	subi	r17, 0xFF	; 255
 408:	18 30       	cpi	r17, 0x08	; 8
 40a:	11 f0       	breq	.+4      	; 0x410 <sensor_write+0x90>
				}
				else if (buffer==0x0)
				{
					sensor_write_1_0(0); // запись 0
				}
				scratchpad=(scratchpad>>1); // сдвинуть содержимое слова данных на разр€д вправо
 40c:	e6 94       	lsr	r14
 40e:	f5 cf       	rjmp	.-22     	; 0x3fa <sensor_write+0x7a>
 410:	88 e8       	ldi	r24, 0x88	; 136
 412:	93 e1       	ldi	r25, 0x13	; 19
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <sensor_write+0x94>
 418:	20 c0       	rjmp	.+64     	; 0x45a <sensor_write+0xda>
			}
		_delay_ms(20); // задержка после записи данных
		return; // возврат из функции
	}
	else if (function_cmd==0xBE)
 41a:	8e eb       	ldi	r24, 0xBE	; 190
 41c:	f8 16       	cp	r15, r24
 41e:	e9 f4       	brne	.+58     	; 0x45a <sensor_write+0xda>
            }
		}
		_delay_ms(20); // задержка после записи данных
		return response; // в ответе содержатс€ данные температуры
	}
	else return; // выходим
 420:	00 e0       	ldi	r16, 0x00	; 0
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<16; ++i)
		{
                        logic_level=sensor_read_1_0(); // чтение линии DQ
			if(logic_level==1)
            {
                response=response | (1<<i); // сборка слова данных температуры
 428:	31 e0       	ldi	r19, 0x01	; 1
 42a:	e3 2e       	mov	r14, r19
 42c:	f1 2c       	mov	r15, r1
	else if (function_cmd==0xBE)
	{
		// если используетс€ команда Read_Scratchpad
		for(i=0; i<16; ++i)
		{
                        logic_level=sensor_read_1_0(); // чтение линии DQ
 42e:	9a df       	rcall	.-204    	; 0x364 <sensor_read_1_0>
			if(logic_level==1)
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	49 f4       	brne	.+18     	; 0x446 <sensor_write+0xc6>
            {
                response=response | (1<<i); // сборка слова данных температуры
 434:	c7 01       	movw	r24, r14
 436:	0c 2e       	mov	r0, r28
 438:	02 c0       	rjmp	.+4      	; 0x43e <sensor_write+0xbe>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <sensor_write+0xba>
 442:	08 2b       	or	r16, r24
 444:	19 2b       	or	r17, r25
 446:	21 96       	adiw	r28, 0x01	; 1
		return; // возврат из функции
	}
	else if (function_cmd==0xBE)
	{
		// если используетс€ команда Read_Scratchpad
		for(i=0; i<16; ++i)
 448:	c0 31       	cpi	r28, 0x10	; 16
 44a:	d1 05       	cpc	r29, r1
 44c:	81 f7       	brne	.-32     	; 0x42e <sensor_write+0xae>
 44e:	88 e8       	ldi	r24, 0x88	; 136
 450:	93 e1       	ldi	r25, 0x13	; 19
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <sensor_write+0xd2>
		}
		_delay_ms(20); // задержка после записи данных
		return response; // в ответе содержатс€ данные температуры
	}
	else return; // выходим
}
 456:	c8 01       	movw	r24, r16
 458:	00 c0       	rjmp	.+0      	; 0x45a <sensor_write+0xda>
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	08 95       	ret

00000468 <main>:
uint16_t sensor_write(uint8_t function_cmd, uint8_t scratchpad);
void sensor_write_1_0(uint8_t bit);
uint8_t sensor_read_1_0(void);
//****************************************************************************************
int main(void)
{
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
	// настройка линий ввода/вывода
	uint16_t counter; // переменна€ счетчика
	DDRB=254; // 7 линий на управление дисплеем, 1 лини€ на датчик
 474:	8e ef       	ldi	r24, 0xFE	; 254
 476:	87 bb       	out	0x17, r24	; 23
	PORTB=0; // сброс линий PB1-PB7 и подт€гивающего резистора PB0
 478:	18 ba       	out	0x18, r1	; 24
	// настройка внешних периферийных устройств
	display_init(); // инициализаци€ диспле€
 47a:	0c de       	rcall	.-1000   	; 0x94 <display_init>
	sensor_write(0x4E, 0x1F); // разрешение преобразовани€ 9 бит
 47c:	8e e4       	ldi	r24, 0x4E	; 78
 47e:	6f e1       	ldi	r22, 0x1F	; 31
 480:	7f df       	rcall	.-258    	; 0x380 <sensor_write>
 482:	40 e5       	ldi	r20, 0x50	; 80
 484:	e4 2e       	mov	r14, r20
 486:	43 ec       	ldi	r20, 0xC3	; 195
 488:	f4 2e       	mov	r15, r20
	while(1)
	{
sensor_write(0x44, 0x00); // преобразование температуры
 48a:	c8 e8       	ldi	r28, 0x88	; 136
 48c:	d3 e1       	ldi	r29, 0x13	; 19
 48e:	84 e4       	ldi	r24, 0x44	; 68
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	76 df       	rcall	.-276    	; 0x380 <sensor_write>
 494:	c7 01       	movw	r24, r14
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <main+0x2e>
_delay_ms(200);
counter=sensor_write(0xBE, 0x00); // чтение температурных данных
 49a:	8e eb       	ldi	r24, 0xBE	; 190
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	70 df       	rcall	.-288    	; 0x380 <sensor_write>
 4a0:	8c 01       	movw	r16, r24
display_write(0, 0, 0x1);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	d0 dd       	rcall	.-1120   	; 0x4a <display_write>
 4aa:	ce 01       	movw	r24, r28
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <main+0x44>
_delay_ms(20);
count_termo(counter);
 4b0:	c8 01       	movw	r24, r16
 4b2:	35 de       	rcall	.-918    	; 0x11e <count_termo>
 4b4:	ec cf       	rjmp	.-40     	; 0x48e <main+0x26>

000004b6 <_exit>:
 4b6:	f8 94       	cli

000004b8 <__stop_program>:
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__stop_program>
